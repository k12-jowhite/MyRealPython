Building a portfolio using the Django Framework.

What you'll learn in this course:
 - How to build a Django project from start to finish
 - We'll do lots of Django deep-dives, asking: how does this actually work?
 - Get friendly with Django error messages
 - Hands-on debugging approaches during Django development
 - Understand Django projects and file structure
 - Understand how requests flow through Django apps
 - Models, views, and templates
 - Primer on Relational Databases and using the Django ORM
 - Interact with your DB from the Django Shell and the Django admin interface
 - Using the Django templating language and template inheritance
 - URL resolving and correctly using path cnonverters and namespaces
 - Using bootstrap for style and mobile responsiveness
 
******************************************************************
Getting Started
******************************************************************
Django File Structure:
 |myproject ~/Documents/myproject
 |---- .env
 |---- example_app
 |-------- migrations
 |-------- __init__.py
 |-------- admin.py
 |-------- apps.py
 |-------- models.py
 |-------- tests.py
 |-------- urls.py
 |-------- views.py
 |----myproject
 |-------- __init__.py
 |-------- settings.py
 |-------- urls.py
 |-------- wsgi.py
 |----manage.py

Django Files:
 - manage.py > won't be touched but will be called frequently
 - myproject
	- urls.py -> Route forward to other apps
	- settings.py -> Project wide settings
 - example_app
	- urls.py -> Directing from myproject
	- models.py -> Database logic
	- views.py -> Django code logic

Basic Flow in a Django project:
 - Local server -> example_app/urls.py -> example_app/views.py -> views.py -> templates -> browser
 
